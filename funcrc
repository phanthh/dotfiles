#============================ EDIT  ===========================#

e() {
  if [ -w "$1" ] 
  then
    $EDITOR $*
  else
    sudoedit $*
  fi
}

edg() {
  if [ -w "$1" ]
  then
    $GEDITOR $* & disown $!
  else
    sudo $GEDITOR $* & disown $!
  fi
}


#=========================== CONFIG ===========================#
alias c="conf"
conf() {
  e $(
  case $1 in
      zshrc|zsh)         echo ~/.config/zsh/.zshrc ;;
      zshenv|env)        echo ~/.zshenv ;;
      zprofile)          echo ~/.config/zsh/.zprofile ;;
      bashrc)            echo ~/.bashrc ;;
      xres)              echo ~/.Xresources && xrdb ~/.Xresources ;;
      xinit)             echo ~/.xinitrc ;;
      tmux)              echo ~/.config/tmux/tmux.conf ;;
      i3)                echo ~/.config/i3/config ;;
      bsp)               echo ~/.config/bspwm/bspwmrc ;;
      ohmyzsh)           echo ~/.oh-my-zsh ;;
      kit|kitty)         echo ~/.config/kitty/kitty.conf ;;
      ala|alacritty)     echo ~/.config/alacritty/alacritty.yml ;;
      sx)                echo ~/.config/sxhkd/sxhkdrc ;;
      vim|nvim)          echo ~/.vimrc ;;
      polybar)           echo ~/.config/polybar/config ;;
      zathura)           echo ~/.config/zathura/zathurarc ;;
      alias|ali)         echo ~/.config/aliasrc ;;
      func|function|fun) echo ~/.config/funcrc ;;
      htop)              echo ~/.config/htop/htoprc ;;
      task)              echo ~/.taskrc ;;
      conky)             echo ~/.config/conky/conky.conf ;;
      npm)               echo ~/.config/npm/npmrc ;;
      dunst)             echo ~/.config/dunst/dunstrc ;;
      newsconf|news)     echo ~/.config/newsboat/config ;;
      newsurl|nb)        echo ~/.config/newsboat/urls  ;;
      yay)               echo ~/.config/yay/config.json  ;;
      paru)              echo ~/.config/paru.conf ;;
      ytmdl)             echo ~/.config/ytmdl/config ;;
      autostart|auto)    echo ~/.bin/i3/autostart ;;
      picom)             echo ~/.config/picom/picom.conf ;;
      i3rs)              echo ~/.config/i3status-rust/config.toml ;;
      run)               echo ~/.local/bin/run ;;
      prompt)            echo $ZSH/custom/themes/windows.zsh-theme ;;
      fstab)             echo /etc/fstab ;;
      grub)              echo /etc/default/grub ;;
      pacman)            echo /etc/pacman.conf ;;
      mirror)            echo /etc/pacman.d/mirrorlist ;;
      sudo)              echo /etc/sudoers ;;
      snap)              echo /etc/snapper/configs/homebk ;;
      *)                 echo ~/.config ;;
  esac)
}

#=========================== FZF ===========================#

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
ff() {
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && xdg-open "${files[@]}"
}

alias ffc="cd $HOME/.config && ff"

# fdh - cd to selected directory, include hidden
fd() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# cdf - cd into the directory of the selected file
fdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fk - kill process
alias ki="fk"
fk() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}

#=========================== PACMAN ===========================#

# Install packages 
in() {
    if [ -z "$1" ]; then
      $AUR_WRAPPER -Slq | fzf -q "$1" -m --preview '${AUR_WRAPPER} -Si {1}'| xargs -ro $AUR_WRAPPER -S
    else 
      $AUR_WRAPPER -S $1
    fi
}

# Remove installed packages 
re() {
    if [ -z "$1" ]; then
      $AUR_WRAPPER -Qq | fzf -q "$1" -m --preview '${AUR_WRAPPER} -Qi {1}' | xargs -ro $AUR_WRAPPER -Rns
    else 
      $AUR_WRAPPER -Rns $1
    fi
}

# Update system
up() {
    $AUR_WRAPPER -Syu
}

#=========================== NNN ===========================#
n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"
    if [ -f "$NNN_TMPFILE" ]; then
        . "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

#=========================== TOOLS ===========================#
# ex - archive extractor
# usage: ex <file>
ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1   ;;
      *.tar.gz)  tar xzf $1   ;;
      *.bz2)     bunzip2 $1   ;;
      *.rar)     unrar x $1     ;;
      *.gz)      gunzip $1    ;;
      *.tar)     tar xf $1    ;;
      *.tbz2)    tar xjf $1   ;;
      *.tgz)     tar xzf $1   ;;
      *.zip)     unzip $1     ;;
      *.Z)       uncompress $1;;
      *.7z)      7z x $1      ;;
      *)         echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file" 
  fi
} 

bak () {
  mv "$1" "$(basename $1).bak"
}

mkcd () {
  mkdir "$1"
  cd "$1"
}

cpcd () {
  cp -r "$1" "$2"
  cd "$2"
}

#==================== BTRFS SNAPSHOTS =========================#

delsnap() {
  sudo snapper -c homebk delete $1
}

cdsnap() {
  cd /home/.snapshots/$1/snapshot/
}

snapshot() {
  if [ $# -eq 0 ]; then
      sudo snapper -c homebk create -d $(date --iso-8601)
  else 
      sudo snapper -c homebk create -d $1
  fi
}
