#============================ edit
# edit
e() {
  if ([ ! -f "$1" ] && [ ! -w "$PWD" ]) || ([ -f "$1" ] && [ ! -w "$1" ]); then
    sudo -e $*
  else
    $EDITOR $*
  fi
}

# edit (gui)
ee() {
  if ([ ! -f "$1" ] && [ ! -w "$PWD" ]) || ([ -f "$1" ] && [ ! -w "$1" ]); then
    sudo $GEDITOR $* &
    disown $!
  else
    $GEDITOR $* &
    disown $!
  fi
}

# pkm
ew(){
  local prevd
  prevd=$(pwd)
  cd "$HOME/Academia/PKM"
  $EDITOR @index.md
  cd "$prevd"
}

# open (gui)
o() {
  open $* >/dev/null 2>&1 &
}

# config (user)
c() {
  local cwd=$(pwd)
  local file
  cd ~/.config
  file=$(git ls-files | fzf -q "$1")
  [ ! -z "$file" ] && $EDITOR "$file"
  cd $cwd
}

# config (system)
ce() {
  local file
  file=$(sudo find /etc | sudo fzf -q "$1")
  [ ! -z "$file" ] && sudoedit "$file"

}

# config (user)
cs() {
  local file
  file=$(find ~/.sh/ | fzf -q "$1")
  [ ! -z "$file" ] && $EDITOR "$file"

}

# help cmd
hl() {
  $1 --help | less
}

# utils
u() {
  "util_$1" "${@:2}"
}

#=========================== fzf

# kill process
fk() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

#=========================== nnn

n() {
  if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    echo "nnn is already running"
    return
  fi

  export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  nnn "$@"
  if [ -f "$NNN_TMPFILE" ]; then
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" >/dev/null
  fi
}

#=========================== git

# Jump between worktrees
gjp() {
  cd $(git worktree list | grep -E "$1" | awk '{print $1}')
}

#=========================== utils

# archive extractor
ex() {
  if [ -f $1 ]; then
    case $1 in
    *.tar.bz2) tar xjf $1 ;;
    *.tar.gz) tar xzf $1 ;;
    *.bz2) bunzip2 $1 ;;
    *.rar) unrar x $1 ;;
    *.gz) gunzip $1 ;;
    *.tar) tar xf $1 ;;
    *.tbz2) tar xjf $1 ;;
    *.tgz) tar xzf $1 ;;
    *.zip) unzip $1 ;;
    *.Z) uncompress $1 ;;
    *.7z) 7z x $1 ;;
    *) echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

linknb() {
  syncfile="$(echo "$1" | cut -f 1 -d '.').sync.ipynb"
  cp "$1" "$syncfile"
  jupytext --set-formats ipynb,py:percent "$syncfile"
}
