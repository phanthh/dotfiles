#============================ edit
# edit
e() {
  if ([ ! -f "$1" ] && [ ! -w "$PWD" ]) || ([ -f "$1" ] && [ ! -w "$1" ]); then
    sudoedit $*
  else
    $EDITOR $*
  fi
}

# edit (gui)
ee() {
  if ([ ! -f "$1" ] && [ ! -w "$PWD" ]) || ([ -f "$1" ] && [ ! -w "$1" ]); then
    sudo $GEDITOR $* &
    disown $!
  else
    $GEDITOR $* &
    disown $!
  fi
}

# open (gui)
o() {
  nohup xdg-open $* >/dev/null 2>&1 &
}

# config (user)
c() {
  local file
  file=$(find ~/.config -type d \( -name '*calibre*' -o -name '*spotify*' -o -name '*libreoffice*' -o -name '*plugged*' -o -name '*JetBrains*' -o -name '*.git*' -o -name '*obsidian*' -o -name '*GIMP*' -o -name '*coc*' -o -name '*chromium*' -o -name '*BraveSoftware*' \) -prune -o -type f -path "*$1*" -print | fzf -q "$1")
  [ ! -z "$file" ] && $EDITOR "$file"
}

# script (user)
cs() {
  local file
  file=$(find ~/.sh -type d \( -name '*.git*' \) -prune -o -type f -path "*$1*" -print | fzf -q "$1")
  [ ! -z "$file" ] && $EDITOR "$file"
}

# config (system)
ce() {
  local file
  file=$(sudo find /etc | sudo fzf -q "$1")
  [ ! -z "$file" ] && sudoedit "$file"

}

# help cmd
hl() {
  $1 --help | less
}

#=========================== fzf

# kill process
fk() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

#=========================== packages

AUR_WRAPPER="paru"

# query
qu() {
  if [ -z "$1" ]; then
    $AUR_WRAPPER -Qq | fzf --multi --preview "$AUR_WRAPPER -Si {1}"
  else
    $AUR_WRAPPER -Qq "$1" | fzf --multi --preview "$AUR_WRAPPER -Si {1}"
  fi
}

# install
in() {
  if [ -z "$1" ]; then $AUR_WRAPPER -Slq | fzf --multi --preview "$AUR_WRAPPER -Si {1}" | xargs -ro $AUR_WRAPPER -S
  else
    $AUR_WRAPPER -S $*
  fi
}

# remove
re() {
  if [ -z "$1" ]; then
    $AUR_WRAPPER -Qeq | fzf --multi --preview "$AUR_WRAPPER -Qi {1}" | xargs -ro $AUR_WRAPPER -Rns
  else
    $AUR_WRAPPER -Rns $*
  fi
}

# update
up() {
  $AUR_WRAPPER -Syu
}

#=========================== nnn

n() {
  if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    echo "nnn is already running"
    return
  fi

  export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  nnn "$@"
  if [ -f "$NNN_TMPFILE" ]; then
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" >/dev/null
  fi
}

#=========================== utils

# archive extractor
ex() {
  if [ -f $1 ]; then
    case $1 in
    *.tar.bz2) tar xjf $1 ;;
    *.tar.gz) tar xzf $1 ;;
    *.bz2) bunzip2 $1 ;;
    *.rar) unrar x $1 ;;
    *.gz) gunzip $1 ;;
    *.tar) tar xf $1 ;;
    *.tbz2) tar xjf $1 ;;
    *.tgz) tar xzf $1 ;;
    *.zip) unzip $1 ;;
    *.Z) uncompress $1 ;;
    *.7z) 7z x $1 ;;
    *) echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

linknb() {
  syncfile="$(echo "$1" | cut -f 1 -d '.').sync.ipynb"
  cp "$1" "$syncfile"
  jupytext --set-formats ipynb,py:percent "$syncfile" 
}
